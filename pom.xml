<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.jaxio.javaeelab</groupId>
    <artifactId>demo</artifactId>
    <packaging>war</packaging>
    <version>1.0.0-SNAPSHOT</version>
    <name>demo</name>
    <description>
        A Java EE 7 webapp project generated by Celerio
        for use on GlassFish 4.0
    </description>

    <properties>
        <!-- Explicitly declaring the source encoding eliminates the following
            message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
            resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <glassfish.version>4.1.1</glassfish.version>
        <embedded-glassfish.version>4.1.1</embedded-glassfish.version>
        <hibernate.version>5.0.2.Final</hibernate.version>

        <!-- ~~~~~~~~ -->
        <!-- Database -->
        <!-- ~~~~~~~~ -->
        <!-- Note: during development using the same value for your login, password, database name and project name is really convenient -->
        <database.name>${project.name}</database.name>
        <database.host>localhost</database.host>
        <database.user>${project.name}</database.user>
        <database.password>${project.name}</database.password>

        <!-- **** CHANGE THE PROPERTIES BELOW TO USE YOUR OWN DATABASE **** -->
        <!-- **** DO NOT USE A PRODUCTION DATABASE **** -->
        <jdbc.type>h2</jdbc.type><!-- see 'db' profile, it is used to find the sql script -->

        <!-- h2 jdbc driver -->
        <jdbc.groupId>com.h2database</jdbc.groupId>
        <jdbc.artifactId>h2</jdbc.artifactId>
        <jdbc.version>1.4.190</jdbc.version>

        <!-- h2 jdbc settings -->
        <jdbc.driver>org.h2.Driver</jdbc.driver>
        <jdbc.url>jdbc:h2:~/.h2/${database.name};MVCC=TRUE;FILE_LOCK=NO</jdbc.url>
        <jdbc.user>${database.user}</jdbc.user>
        <jdbc.password>${database.password}</jdbc.password>
        <jdbc.catalog></jdbc.catalog>
        <hibernate.dialect>org.hibernate.dialect.H2Dialect</hibernate.dialect>
        <sql-maven-plugin.delimiter>;</sql-maven-plugin.delimiter>


        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Version dependencies when used in multiple dependencies -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <celerio-maven-plugin.outputDir>${project.basedir}</celerio-maven-plugin.outputDir>
        <celerio-maven-plugin.version>4.0.2</celerio-maven-plugin.version>

        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Variables substituted in resources file at build time -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <application.name>${project.name}</application.name>
        <application.version>${project.version}</application.version>
        <application.description>${project.description}</application.description>
        <!-- host port where the application will be deployed -->
        <application.host>localhost</application.host>
        <application.port>8080</application.port>
        <application.contextpath>/demo</application.contextpath>
        <!-- logs -->
        <log.target>${project.build.directory}/logs</log.target>
        <log.level>DEBUG</log.level>
        <log.sql.queries.level>DEBUG</log.sql.queries.level>
        <!-- hibernate, see by src/main/resource/hibernate.properties -->
        <hibernate.show.sql>true</hibernate.show.sql>
        <hibernate.format.sql>true</hibernate.format.sql>
        <hibernate.generate_statistics>true</hibernate.generate_statistics>
        <hibernate.use_sql_comments>true</hibernate.use_sql_comments>
        <hibernate.ehcache.configuration.file>ehcache.xml</hibernate.ehcache.configuration.file>
        <hibernate.use.second.level.cache>true</hibernate.use.second.level.cache>
        <hibernate.use.query.cache>true</hibernate.use.query.cache>

        <weld.version>2.3.1.Final</weld.version>

        <deltaspike.version>0.4</deltaspike.version>
        <shiro.version>1.2.2</shiro.version>

        <primefaces.version>5.3</primefaces.version>
        <primefaces-themes.version>1.0.10</primefaces-themes.version>
    </properties>
    <dependencies>
        <!--This has most of the needed dependencies : Derby, JPA, EJB, Java EE 7... -->
        <dependency>
            <groupId>org.glassfish.main.extras</groupId>
            <artifactId>glassfish-embedded-all</artifactId>
            <version>${glassfish.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-java8</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.1</version>
            <scope>runtime</scope>
        </dependency>

        <!-- JSR-303 (Bean Validation) Implementation -->
        <!-- Provides portable constraints such as @Email
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>4.2.0.Final</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
         -->

        <!-- Now we declare any tools needed -->

        <!-- Annotation processor that raising compilation errors whenever constraint
            annotations are incorrectly used.
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <version>4.2.0.Final</version>
        </dependency>
        -->

        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Dependencies needed by the generated project -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

        <!-- ~~~~~~~~~~~ -->
        <!-- PERSISTENCE -->
        <!-- ~~~~~~~~~~~ -->
        <dependency>
            <groupId>${jdbc.groupId}</groupId>
            <artifactId>${jdbc.artifactId}</artifactId>
            <version>${jdbc.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- ~~~~~~~~~~~~~~~~ -->
        <!-- HIBERNATE SEARCH -->
        <!-- ~~~~~~~~~~~~~~~~ -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search-orm</artifactId>
            <version>5.5.0.Final</version>
            <exclusions>
                <exclusion>
                    <artifactId>lucene-kuromoji</artifactId>
                    <groupId>org.apache.lucene</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-common</artifactId>
            <version>1.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-core</artifactId>
            <version>5.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tika</groupId>
            <artifactId>tika-parsers</artifactId>
            <version>1.11</version>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.9.13</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>

        <!-- ~~~~~ -->
        <!-- UTILS -->
        <!-- ~~~~~ -->
        <dependency>
            <groupId>net.sf.jxls</groupId>
            <artifactId>jxls-core</artifactId>
            <version>1.0.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>13.0.1</version><!--  beware, version 14.0.1 won't work with javaee/cdi!! -->
        </dependency>
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3</version>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.8.3</version>
        </dependency>

        <!-- ~~~~~~~~~ -->
        <!-- CDI Stuff -->
        <!-- ~~~~~~~~~ -->
        <dependency>
            <groupId>org.apache.deltaspike.core</groupId>
            <artifactId>deltaspike-core-api</artifactId>
            <version>${deltaspike.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.deltaspike.core</groupId>
            <artifactId>deltaspike-core-impl</artifactId>
            <version>${deltaspike.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- ~~~~~~~~~~~ -->
        <!-- Security	 -->
        <!-- ~~~~~~~~~~~ -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-web</artifactId>
            <version>${shiro.version}</version>
        </dependency>

        <!-- ~~~ -->
        <!-- WEB -->
        <!-- ~~~ -->
        <dependency>
            <groupId>org.primefaces</groupId>
            <artifactId>primefaces</artifactId>
            <version>${primefaces.version}</version>
        </dependency>
        <dependency>
            <groupId>org.omnifaces</groupId>
            <artifactId>omnifaces</artifactId>
            <version>1.5</version>
        </dependency>
        <dependency>
            <groupId>org.primefaces.themes</groupId>
            <artifactId>bootstrap</artifactId>
            <version>${primefaces-themes.version}</version>
        </dependency>

        <!-- ~~~~ -->
        <!-- TEST -->
        <!-- ~~~~ -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.easytesting</groupId>
            <artifactId>fest-assert</artifactId>
            <version>1.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!-- ~~~~~~~~~~~~ -->
    <!-- REPOSITORIES -->
    <!-- ~~~~~~~~~~~~ -->
    <repositories>
        <repository>
            <id>java.net-releases-repository</id>
            <name>Java.Net Releases Maven Repository</name>
            <url>https://maven.java.net/content/repositories/releases</url>
        </repository>
        <repository>
            <id>java.net-snapshots-repository</id>
            <name>Java.Net Snapshots Maven Repository</name>
            <url>https://maven.java.net/content/repositories/snapshots</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>primefaces</id>
            <url>http://repository.primefaces.org</url>
            <layout>default</layout>
        </repository>
        <repository>
            <id>jboss</id>
            <url>http://repository.jboss.org/nexus/content/groups/public-jboss</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>java.net-releases-repository</id>
            <name>Java.Net Releases Maven Repository</name>
            <url>https://maven.java.net/content/repositories/releases</url>
        </pluginRepository>
        <pluginRepository>
            <id>java.net-snapshots-repository</id>
            <name>Java.Net Snapshots Maven Repository</name>
            <url>https://maven.java.net/content/repositories/snapshots</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>Codehaus Snapshots</id>
            <url>https://nexus.codehaus.org/content/repositories/releases</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
    <build>
        <!-- Maven will append the version to the finalName (which is the name
            given to the generated war, and hence the context root) -->
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>${celerio-maven-plugin.outputDir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>${celerio-maven-plugin.outputDir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-resources-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <delimiters>
                        <delimiter>@*@</delimiter>
                    </delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>xls</nonFilteredFileExtension>
                        <nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
                        <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-compiler-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArgument>-Xlint</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <!-- http://mojo.codehaus.org/build-helper-maven-plugin/ -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.9.1</version>
                <executions>
                    <execution>
                        <id>Adding generated java folder to build</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/main/java</source>
                                <source>src/main/generated-java</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Adding generated java test location to test build</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/test/java</source>
                                <source>src/test/generated-java</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <!-- Java EE 7 doesn't require web.xml, Maven needs to catch up! -->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <!-- Datasource used during developement -->
                    <webResources>
                        <resource>
                            <directory>src/main/config/glassfish</directory>
                            <targetPath>WEB-INF</targetPath>
                            <filtering>true</filtering>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>
            <!-- Run mvn embedded-glassfish:run and go to http://localhost:8080/ -->
            <plugin>
                <groupId>org.glassfish.embedded</groupId>
                <artifactId>maven-embedded-glassfish-plugin</artifactId>
                <version>${embedded-glassfish.version}</version>
                <configuration>
                    <ports>
                        <http-listener>8080</http-listener>
                    </ports>
                </configuration>
                <executions>
                    <execution>
                        <id>admin-add-resources</id>
                        <goals>
                            <goal>admin</goal>
                        </goals>
                        <configuration>
                            <commands>
                                <param>add-resources
                                    ${project.build.directory}/${project.artifactId}/WEB-INF/glassfish-resources.xml
                                </param>
                            </commands>
                        </configuration>
                    </execution>
                    <execution>
                        <id>admin-ping-connection-pool</id>
                        <goals>
                            <goal>admin</goal>
                        </goals>
                        <configuration>
                            <commands>
                                <param>ping-connection-pool embeddedConnPool</param>
                            </commands>
                        </configuration>
                    </execution>
                    <execution>
                        <id>deploy</id>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>${jdbc.groupId}</groupId>
                        <artifactId>${jdbc.artifactId}</artifactId>
                        <version>${jdbc.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- The default profile skips all tests, though you can tune it to run
                just unit tests based on a custom pattern -->
            <!-- Seperate profiles are provided for running all tests, including Arquillian
                tests that execute in the specified container -->
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.18.1</version>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~ -->
            <!-- Disable debug modes -->
            <!-- ~~~~~~~~~~~~~~~~~~~ -->
            <id>perf</id>
            <properties>
                <hibernate.show.sql>false</hibernate.show.sql>
                <hibernate.format.sql>false</hibernate.format.sql>
                <hibernate.use_sql_comments>false</hibernate.use_sql_comments>
                <hibernate.generate_statistics>false</hibernate.generate_statistics>
                <log.level>WARN</log.level>
                <log.sql.queries.level>WARN</log.sql.queries.level>
            </properties>
        </profile>
        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!-- Drop and recreate the database -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <id>db</id>
            <build>
                <defaultGoal>initialize</defaultGoal>
                <plugins>
                    <plugin>
                        <!-- http://mojo.codehaus.org/sql-maven-plugin/ -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>sql-maven-plugin</artifactId>
                        <version>1.5</version>
                        <executions>
                            <execution>
                                <id>Create and initialize the database</id>
                                <phase>initialize</phase>
                                <configuration>
                                    <driver>${jdbc.driver}</driver>
                                    <url>${jdbc.url}</url>
                                    <username>${jdbc.user}</username>
                                    <password>${jdbc.password}</password>
                                    <autocommit>true</autocommit>
                                    <encoding>UTF-8</encoding>
                                    <printResultSet>true</printResultSet>
                                    <onError>continue</onError>
                                    <delimiter>${sql-maven-plugin.delimiter}</delimiter>
                                    <orderFile>ascending</orderFile>
                                    <fileset>
                                        <basedir>${project.basedir}</basedir>
                                        <includes>
                                            <include>src/main/sql/${jdbc.type}/*.sql</include>
                                        </includes>
                                    </fileset>
                                </configuration>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>${jdbc.groupId}</groupId>
                                <artifactId>${jdbc.artifactId}</artifactId>
                                <version>${jdbc.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Profiles below are used when Celerio Maven Plugin is present in the build process -->
        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!-- Extract the database metadata -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <id>metadata</id>
            <build>
                <defaultGoal>generate-sources</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>com.jaxio.celerio</groupId>
                        <artifactId>dbmetadata-maven-plugin</artifactId>
                        <version>${celerio-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>Extract the database schema.</id>
                                <goals>
                                    <goal>extract-metadata</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>${jdbc.groupId}</groupId>
                                <artifactId>${jdbc.artifactId}</artifactId>
                                <version>${jdbc.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
            <repositories>
                <repository>
                    <id>jaxio-repository</id>
                    <url>http://maven.jaxio.com/repository</url>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>jaxio-repository</id>
                    <url>http://maven.jaxio.com/repository</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>
        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!-- Generate the code using Celerio -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <id>gen</id>
            <build>
                <defaultGoal>generate-sources</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>com.jaxio.celerio</groupId>
                        <artifactId>celerio-maven-plugin</artifactId>
                        <version>${celerio-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>Generates files using the extracted database schema.</id>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
            <repositories>
                <repository>
                    <id>jaxio-repository</id>
                    <url>http://maven.jaxio.com/repository</url>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>jaxio-repository</id>
                    <url>http://maven.jaxio.com/repository</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>
        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!-- Delete code generated by Celerio -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <id>cleanGen</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.jaxio.celerio</groupId>
                        <artifactId>celerio-maven-plugin</artifactId>
                        <version>${celerio-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>Delete previously generated files (use .celerio/ folder)</id>
                                <goals>
                                    <goal>cleanGenerated</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
            <repositories>
                <repository>
                    <id>jaxio-repository</id>
                    <url>http://maven.jaxio.com/repository</url>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>jaxio-repository</id>
                    <url>http://maven.jaxio.com/repository</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>
    </profiles>
</project>